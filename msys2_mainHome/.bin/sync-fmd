#!/usr/bin/env bash
#fmd db sync

# test arguments
if [ $# -eq 0 ]; then
	echo -e '\e[31mYou have to specify pull or push'
	exit 2
fi

maxsize=900000
baksize=1000000
# paths - change these as needed
FMD_PCx="/e/untied/FMD"
FMD_x230="/c/untied/FMD"
encoder_PCx="/d/WorkSpace/=encoder="
encoder_x230="/d/_gitClone/[encoder]"
# logfiles
runLog="sync-fmd.$HOSTNAME.${1^^}.log"
dryLog="sync-fmd.$HOSTNAME.${1^^}.DRY_RUN"
# preview coloring
grepSysCol="mt=1;93"
grepSendCol="mt=1;34"
grepDelCol="mt=1;31"
grepUnchCol="mt=1;32"
grepSysMsg='(total:).*|(sending incremental file list)|(delta-transmission).*|.*(bytes\/sec)|.*(\(DRY RUN\))|$'
grepSendMsg='^(\[sender\]).*|$'
grepDelMsg='(deleting).*|$'
grepUnchMsg='.*(uptodate)$|$'

# get where we are
if [ -d "$FMD_x230" ]; then
	encoderGit="$encoder_x230"
	pathFMD="$FMD_x230"
	echo -e "\e[44mDirectory \e[33m$FMD_x230\e[37m found. Using \e[33m$encoder_x230\e[37m as Git versioning. \e[35mOn the road mode...\e[0m"
elif [ -d "$FMD_PCx" ]; then
	encoderGit="$encoder_PCx"
	pathFMD="$FMD_PCx"
	echo -e "\e[44mDirectory \e[33m$FMD_PCx\e[37m found. Using \e[33m$encoder_PCx\e[37m as Git versioning. \e[35mHomebase mode...\e[0m"
fi

# MAIN logic
if [ "$1" == 'pull' ]; then
	# rsync -Ccazvvn --exclude-from='.exclude-fmd' "$encoderGit/manDB/works/" "$pathFMD/works/" | tee "$dryLog" | GREP_COLORS="$grepSysCol" egrep --color=always "$grepSysMsg" | GREP_COLORS="$grepSendCol" egrep --color=always "$grepSendMsg" | GREP_COLORS="$grepDelCol" egrep --color=always $grepDelMsg | GREP_COLORS="$grepUnchCol" egrep --color=always "$grepUnchMsg" | less -R
	read -p "Confirm $1? [no] " yesOrYes
	yesOrYes=${yesOrYes:-no}
	if [ "$yesOrYes" == 'yes' ]; then
		rsync -Ccaziiv --exclude-from='.exclude-fmd' "$encoderGit/manDB/works/" "$pathFMD/works/" --log-file="$runLog"
		cp "$runLog" "$(cygpath $USERPROFILE)/dotfiles/.logs/"
		rm "$dryLog"
	fi
elif [ "$1" == 'push' ]; then
	# rsync -Ccazv "$pathFMD/data/" "$encoderGit/manDB/data/" # FMD no longer uses data for manga sites
	# rsync -Ccazvvn --exclude-from='.exclude-fmd' "$pathFMD/works/" "$encoderGit/manDB/works/" | tee "$dryLog" | GREP_COLORS="$grepSysCol" egrep --color=always "$grepSysMsg" | GREP_COLORS="$grepSendCol" egrep --color=always "$grepSendMsg" | GREP_COLORS="$grepDelCol" egrep --color=always $grepDelMsg | GREP_COLORS="$grepUnchCol" egrep --color=always "$grepUnchMsg" | less -R
	read -p "Confirm $1? [no] " yesOrYes
	yesOrYes=${yesOrYes:-no}
	if [ "$yesOrYes" == 'yes' ]; then
		rsync -Ccaziiv --exclude-from='.exclude-fmd' "$pathFMD/works/" "$encoderGit/manDB/works/" --log-file="$runLog"
		cp "$runLog" "$(cygpath $USERPROFILE)/dotfiles/.logs/"
		rm "$dryLog"
	fi
fi

# log sizing & archiving
filesize=$(stat -c%s "$runLog")
if ((filesize > maxsize)) && ((filesize < baksize)); then
	echo -e "\e[30;43mCaution: Log file is 900kb large. Consider backing up and/or deleting. Log will be automatically archived soon.\e[0m"
elif ((filesize > baksize)); then
	echo -e "\e[34;43mAttention: Log file is 1mb large. Archiving...\e[0m"
	for i in {1..3}; do
		if [ ! -f "$runLog.bak$i" ]; then
			tar -czvf "$runLog.bak$i" "$runLog"
			: >"$runLog"
			echo -e "\e[34mLog file archived to $runLog.bak$i (uses tar gzip). Note that log backups are not sent to Git versioning.\e[0m"
			break
		elif [ -f "$runLog.bak1" ] && [ -f "$runLog.bak2" ] && [ -f "$runLog.bak3" ]; then
			echo -e "\e[31;44mArchive full! Highly advise deleting the log files and/or backups. This message will keep showing otherwise. File $runLog.bak$i exists.\e[0m"
		fi
	done
fi
