#!/usr/bin/env bash
#savegame sync/backup

# test arguments
if [ $# -eq 0 ]; then
	echo -e '\e[31mYou have to specify pull or push'
	exit 2
fi

maxsize=900000
baksize=1000000
arcsize=99000000
# paths - change these as needed
input=".savegameList"
dotfiles="$(cygpath $USERPROFILE)/dotfiles"
saveTemp_PCx="/y/tempDownload/savedata"
saveTemp_x230="/y/tempDownload/savedata"
# logfiles
tarLog="sync-savegame.$HOSTNAME.${1^^}.ARC.log"
runLog="sync-savegame.$HOSTNAME.${1^^}.log"
dryLog="sync-savegame.$HOSTNAME.${1^^}.DRY_RUN"
# preview coloring
grepSysCol="mt=1;93"
grepSendCol="mt=1;34"
grepDelCol="mt=1;31"
grepUnchCol="mt=1;32"
grepSysMsg='(total:).*|(sending incremental file list)|(delta-transmission).*|.*(bytes\/sec)|.*(\(DRY RUN\))|$'
grepSendMsg='^(\[sender\]).*|$'
grepDelMsg='(deleting).*|$'
grepUnchMsg='.*(uptodate)$|$'

dbxUpload() {
	echo -e "\e[44mUploading to dropbox...\e[0m"
	archivesize=$(stat -c%s "$saveTemp_PCx/$1-$(date +%d%b%Y).tar.gz")
	if ((archivesize > arcsize)); then
		read -p "Archive is over 99mb. Are you sure you want to continue uploading? [no] " yesOrYes
		yesOrYes=${yesOrYes:-no}
		if [ "$yesOrYes" == 'yes' ]; then
			dbxcli put "$saveTemp_PCx/$1-$(date +%d%b%Y).tar.gz" "SaveData/$1-$(date +%d%b%Y).tar.gz"
		fi
	else
		dbxcli put "$saveTemp_PCx/$1-$(date +%d%b%Y).tar.gz" "SaveData/$1-$(date +%d%b%Y).tar.gz"
	fi
}

# get where we are
if [ "$USERPROFILE" == "C:\Users\zeruel11" ]; then
	echo -e "\e[44mDirectory \e[33m$saveGit_x230\e[37m found. \e[35mOn the road mode...\e[0m"
	encoderGit="$saveGit_x230"
elif [ "$USERPROFILE" == "C:\Users\zeruel" ]; then
	echo -e "\e[44mDirectory \e[33m$saveGit_PCx\e[37m found. \e[35mHomebase mode...\e[0m"
	encoderGit="$saveGit_PCx"
fi

# MAIN logic
case $1 in
'pull')
	echo "placeholder"
	;;
'push')
	echo "SaveData archival - timestamp: $(date)" >>~/$tarLog

	while IFS=: read -r f1 f2 f3; do
		printf "\nSaveData: %s\nSource: %s, Destination: %s\n" "$f1" "$f2" "$f3" >>$runLog
		rsync -Cuazvv --filter="merge .filter-savedata" --prune-empty-dirs "$f2" "$f3" --log-file="$runLog" --delete-before --delete-excluded
		cp "$runLog" "$dotfiles/.logs/"

		printf "\nSaveData: %s\n" "$f1" >>$tarLog
		tar -czvf "$saveTemp_PCx/$f1-$(date +%d%b%Y).tar.gz" -C "$saveTemp_PCx" $(basename "$f3") >>~/$tarLog
		cp "$tarLog" "$dotfiles/.logs/"

		read -u 3 user
		echo "$user"

	done 3<&0 <"$input"

	read -p "Do you want to auto-git? [no] " yesOrYes
	yesOrYes=${yesOrYes:-no}
	if [ "$yesOrYes" == 'yes' ]; then
		cd $saveTemp_PCx && git add . && git commit -m "SaveData versioning: $(date)" && cd $HOME
	fi

	echo -e "\e[34mPlease check if the upload is successful\e[0m"
	read -p $'Do you want to \e[31mREMOVE\e[0m any uploaded backups? [no] ' yesOrYes
	yesOrYes=${yesOrYes:-no}
	if [ "$yesOrYes" == 'yes' ]; then
		while IFS=: read -r f1 f2 f3; do
			rm "$saveTemp_PCx/$f1-$(date +%d%b%Y).tar.gz"
		done <"$input"
	fi
	;;
esac

# log sizing & archiving
filesize=$(stat -c%s "$runLog")
if ((filesize > maxsize)) && ((filesize < baksize)); then
	echo -e "\e[30;43mCaution: Log file is 900kb large. Consider backing up and/or deleting. Log will be automatically archived soon.\e[0m"
elif ((filesize > baksize)); then
	echo -e "\e[34;43mAttention: Log file is 1mb large. Archiving...\e[0m"
	for i in {1..3}; do
		if [ ! -f "$runLog.bak$i" ]; then
			tar -czvf "$runLog.bak$i" "$runLog"
			: >"$runLog"
			echo -e "\e[34mLog file archived to $runLog.bak$i (uses tar gzip). Note that log backups are not sent to Git versioning.\e[0m"
			break
		elif [ -f "$runLog.bak1" ] && [ -f "$runLog.bak2" ] && [ -f "$runLog.bak3" ]; then
			echo -e "\e[31;44mArchive full! Highly advise deleting the log files and/or backups. This message will keep showing otherwise. File $runLog.bak$i exists.\e[0m"
		fi
	done
fi
