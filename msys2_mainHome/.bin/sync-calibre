#!/bin/bash
#calibre sync

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
# log file size
maxsize=900000
baksize=1000000
# paths
calibre_PCx="/d/E-book"
calibre_x230="/d/KataLoGue"
calibre_IKTI="bambang_ebis@10.126.12.212::calibre"
FD="/f/[calibre]/KataLoGue"
rsyncTest="/home/bambang_ebis/caltest"
dotfiles="$(cygpath $USERPROFILE)/dotfiles"
# preview coloring
grepSysCol="mt=1;93;44"
grepSendCol="mt=1;34"
grepSkipCol="mt=1;35"
grepDelCol="mt=1;31"
grepUnchCol="mt=1;32"
grepSysMsg='(total:).*|(sending incremental file list)|(delta-transmission).*|.*(bytes\/sec)|.*(\(DRY RUN\))|$'
grepSendMsg='^(\[sender\]).*|$'
grepSkipMsg='(not creating new file).*|$'
grepDelMsg='(deleting).*|$'
grepUnchMsg='.*(uptodate)$|$'
# logfiles
runLog="$(basename $0).$HOSTNAME.log"
dryLog="$(basename $0).$HOSTNAME.DRY_RUN"
# excludes/filter files
filterFile="$DIR/.exclude-calibre"

# test filters (if needed)
if [ ! -z ${filterFile+x} ]; then
	if [ ! -f $filterFile ]; then
		echo -e "\e[31mFile $filterFile not found!\e[0m"
		exit 1
	fi
fi

function usage() {
	cat <<HELP_USAGE

    usage: $(basename $0) [ps|pl|ex] <drivepath>

    -h, --help			Print this message
    ps, push			Sync current directory to git repo
    pl, pull			Sync git repo to current dir
    ex, export			Export current directory to portable drives
HELP_USAGE

	exit 0
}

function path_input() {
	read -e -p "Please enter path to calibre catalogue: " source
	if [ ! -f "$source/metadata.db" ]; then
		echo -e "\e[30;43mWARNING: file $source/metadata.db not found (wrong sync dir?), exiting...\e[0m"
		exit 1
	fi
}

function define_source() {
	if [ ! -d "$dotfiles" ]; then
		echo -e "\e[30;43mWARNING: $dotfiles not found, exiting...\e[0m"
		exit 1
	fi
	if [ -d "$calibre_PCx" ]; then
		source="$calibre_PCx"
		read -p $'\e[44mCalibre catalogue found on \e[33m'"$source"$'\e[0m\n' -t 5
	elif [ -d "$calibre_x230" ]; then
		source="$calibre_x230"
		read -p $'\e[44mCalibre catalogue found on \e[33m'"$source"$'\e[0m\n' -t 5
	else
		echo -e "\e[31mCalibre catalogue directory not found. Is it installed?\e[0m"
		path_input
	fi
}

# check IKTI online
function IKTIonline() {
	if ssh IKTI "[ -d "$rsyncTest" ]"; then
		echo -e "\e[44mServer is online\e[0m"
	else
		echo -e "\e[41mServer is unreachable\e[0m"
		exit 1
	fi
}

function command_exception() {
	if [ "$1" != "" ]; then
		echo "Command $sync does not accept more arguments"
		usage
	fi
}

function main_logic() {
	rsync -Ccazvvn --exclude-from="$filterFile" "$1" "$2" $3 | tee "$HOME/.logs/$dryLog" | GREP_COLORS="$grepSysCol" egrep --color=always "$grepSysMsg" | GREP_COLORS="$grepSendCol" egrep --color=always "$grepSendMsg" | GREP_COLORS="$grepSkipCol" egrep --color=always "$grepSkipMsg" | GREP_COLORS="$grepDelCol" egrep --color=always "$grepDelMsg" | GREP_COLORS="$grepUnchCol" egrep --color=always "$grepUnchMsg" | less -R
	read -p "Confirm $sync? [no] " yesOrYes
	yesOrYes=${yesOrYes:-no}
	if [ "$yesOrYes" == 'yes' -o "$yesOrYes" == 'y' ]; then
		echo "$1 $sync to $2" >>$HOME/.logs/$runLog
		rsync -Cuazv --exclude-from="$filterFile" "$1" "$2" $3 --log-file="$runLog" && rm "$HOME/.logs/$dryLog"
		if [ -f "$dotfiles/.logs/$runLog" ] && [ -f "$HOME/.logs/$runLog" ]; then
			diff -u $dotfiles/.logs/$runLog $HOME/.logs/$runLog | grep -E "^\+" | sed -E 's/^\+//' >>$dotfiles/.logs/$runLog
			cp "$dotfiles/.logs/$runLog" "$HOME/.logs/"
		else
			cp "$HOME/.logs/$runLog" "$dotfiles/.logs/"
		fi
	fi
}

function command_param() {
	case $1 in

	pl | pull)
		sync="pull"
		command_exception "$2"
		define_source
		IKTIonline
		echo -e "\e[44m${sync[@]^}ing Calibre e-book catalogue\e[0m"
		main_logic "$calibre_IKTI" "$source/"
		;;

	ps | push)
		sync="push"
		command_exception "$2"
		define_source
		IKTIonline
		echo -e "\e[44m${sync[@]^}ing Calibre e-book catalogue\e[0m"
		main_logic "$source/" "$calibre_IKTI" "--delete-before --delete-excluded"
		;;

	ex | export)
		sync="export"
		define_source
		echo -e "\e[44m${sync[@]^}ing Calibre e-book catalogue\e[0m"
		if [ $# -lt 2 ]; then
			echo "Path not specified, using default: $FD"
			if [ -d "$FD" ]; then
				main_logic "$source/" "$FD/"
			else
				echo -e "\e[41mFlashdisk not found! Please specify export path.\e[0m"
				usage
			fi
		elif [ $# -eq 2 ]; then
			if [ "${2: -1}" != "/" ]; then
				echo -e "\e[31mPlease use full FOLDER path (with /) to let rsync use folder and not files!\e[0m"
				exit 1
			elif [ -d "$2" ]; then
				echo "Exporting calibre catalogue to $2..."
				main_logic "$source/" "$2" "--delete-before --delete-excluded"
			else
				echo -e "\e[31mThe specified path doesn't exist!\e[0m"
				exit 1
			fi
		fi
		;;

	lg | log | logs)
		sync="logs"
		command_exception $2
		if [ -f "$HOME/.logs/$dryLog" ]; then
			read -p $'\e[44mFound DRY_RUN log on '"$HOME/.logs/$dryLog"$', opening...\e[0m' -t 5
			cat "$HOME/.logs/$dryLog" | GREP_COLORS="$grepSysCol" egrep --color=always "$grepSysMsg" | GREP_COLORS="$grepSendCol" egrep --color=always "$grepSendMsg" | GREP_COLORS="$grepDelCol" egrep --color=always "$grepDelMsg" | GREP_COLORS="$grepUnchCol" egrep --color=always "$grepUnchMsg" | less -R
		else
			read -p $'\e[44mFound log on '"$HOME/.logs/$runLog"$', opening...\e[0m' -t 5
			cat "$HOME/.logs/$runLog" | GREP_COLORS="$grepSysCol" egrep --color=always "$grepSysMsg" | GREP_COLORS="$grepSendCol" egrep --color=always "$grepSendMsg" | GREP_COLORS="$grepDelCol" egrep --color=always "$grepDelMsg" | GREP_COLORS="$grepUnchCol" egrep --color=always "$grepUnchMsg" | less -R
		fi
		;;

	-h | --help)
		usage
		;;

	"")
		usage
		;;

	*)
		echo "Unknown option - $1"
		usage
		;;
	esac
}

if [ $# -gt 2 ]; then
	for ((i = 3; i <= $#; i++)); do
		echo "No parameter ${!i} found"
	done
	usage
else
	command_param $1 $2
fi

# log archiving
if [ -f "$HOME/.logs/$runLog" ]; then
	filesize=$(stat -c%s "$HOME/.logs/$runLog")
	if ((filesize > maxsize)) && ((filesize < baksize)); then
		echo -e "\e[30;43mCaution: Log file is 900kb large. Consider backing up and/or deleting. Log will be automatically archived soon.\e[0m"
	elif ((filesize > baksize)); then
		echo -e "\e[34;43mAttention: Log file is 1mb large. Archiving...\e[0m"
		for i in {1..3}; do
			if [ ! -f "$HOME/.logs/$runLog.bak$i" ]; then
				tar -czvf "$HOME/.logs/$runLog.bak$i" "$HOME/.logs/$runLog" --remove-files
				echo -e "\e[34mLog file archived to $HOME/.logs/$runLog.bak$i (uses tar gzip). Note that log backups are not sent to Git versioning.\e[0m"
				break
			elif [ -f "$HOME/.logs/$runLog.bak1" ] && [ -f "$HOME/.logs/$runLog.bak2" ] && [ -f "$HOME/.logs/$runLog.bak3" ]; then
				echo -e "\e[31;44mArchive full! Highly advise deleting the log files and/or backups. This message will keep showing otherwise. File $HOME/.logs/$runLog.bak$i exists.\e[0m"
			fi
		done
	fi
fi
