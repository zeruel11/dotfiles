#!/usr/bin/env bash
#profile config sync

# test arguments
if [ $# -eq 0 ]; then
	echo -e '\e[31mYou have to specify pull or push'
	exit 2
fi

maxsize=900000
baksize=1000000
# paths
terminalProfile="$(cygpath $LOCALAPPDATA)/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/"
pwshProfile="$(cygpath $USERPROFILE)/Documents/PowerShell/"
powershellProfile="$(cygpath $USERPROFILE)/Documents/WindowsPowerShell/"
dotfiles="$(cygpath $USERPROFILE)/dotfiles/win10_userprofile/"
# preview coloring
grepSysCol="mt=1;93"
grepSendCol="mt=1;34"
grepDelCol="mt=1;31"
grepUnchCol="mt=1;32"
grepSysMsg='(total:).*|(sending incremental file list)|(delta-transmission).*|.*(bytes\/sec)|.*(\(DRY RUN\))|$'
grepSendMsg='^(\[sender\]).*|$'
grepDelMsg='(deleting).*|$'
grepUnchMsg='.*(uptodate)$|$'
#logfiles
runLog="sync-profile.$HOSTNAME.${1^^}.log"
dryLog="sync-profile.$HOSTNAME.${1^^}.DRY_RUN"

function main_logic() {
	if [ "$1" == 'pull' ]; then
		rsync -Ccazvvn "$dotfiles" "$2" | tee "$dryLog" | GREP_COLORS="$grepSysCol" egrep --color=always "$grepSysMsg" | GREP_COLORS="$grepSendCol" egrep --color=always "$grepSendMsg" | GREP_COLORS="$grepDelCol" egrep --color=always "$grepDelMsg" | GREP_COLORS="$grepUnchCol" egrep --color=always "$grepUnchMsg" | less -R
		read -p "Confirm $1? [no] " yesOrYes
		yesOrYes=${yesOrYes:-no}
		if [ "$yesOrYes" == 'yes' ]; then
			rsync -Ccaziiv "$dotfiles" "$2" --log-file="$runLog"
			cp "$runLog" "$dotfiles/.logs/"
			rm "$dryLog"
		fi
	elif [ "$1" == 'push' ]; then
		rsync -Ccazvvn "$2" "$dotfiles" | tee "$dryLog" | GREP_COLORS="$grepSysCol" egrep --color=always "$grepSysMsg" | GREP_COLORS="$grepSendCol" egrep --color=always "$grepSendMsg" | GREP_COLORS="$grepDelCol" egrep --color=always "$grepDelMsg" | GREP_COLORS="$grepUnchCol" egrep --color=always "$grepUnchMsg" | less -R
		read -p "Confirm $1? [no] " yesOrYes
		yesOrYes=${yesOrYes:-no}
		if [ "$yesOrYes" == 'yes' ]; then
			rsync -Ccaziiv "$2" "$dotfiles" --log-file="$runLog"
			cp "$runLog" "$dotfiles/.logs/"
			rm "$dryLog"
		fi
	fi
}

case $1 in

	pwsh | powershell)
		main_logic $2 $pwshProfile;
		;;

	term)
		main_logic $2 $terminalProfile;
		;;
esac

if [ -f "$runLog" ]; then
	filesize=$(stat -c%s "$runLog")
	if ((filesize > maxsize)) && ((filesize < baksize)); then
		echo -e "\e[30;43mCaution: Log file is 900kb large. Consider backing up and/or deleting. Log will be automatically archived soon.\e[0m"
	elif ((filesize > baksize)); then
		echo -e "\e[34;43mAttention: Log file is 1mb large. Archiving...\e[0m"
		for i in {1..3}; do
			if [ ! -f "$runLog.bak$i" ]; then
				tar -czvf "$runLog.bak$i" "$runLog" --remove-files
				echo -e "\e[34mLog file archived to $runLog.bak$i (uses tar gzip). Note that log backups are not sent to Git versioning.\e[0m"
				break
			elif [ -f "$runLog.bak1" ] && [ -f "$runLog.bak2" ] && [ -f "$runLog.bak3" ]; then
				echo -e "\e[31;44mArchive full! Highly advise deleting the log files and/or backups. This message will keep showing otherwise. File $runLog.bak$i exists.\e[0m"
			fi
		done
	fi
fi
